# -*- coding: utf-8 -*-
"""ولاء عصام - Computer Vision Bootcamp Assignment 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M-_zUfnprw5iVuSLqZ3R8fHG5OeHYX2a

# Computer Vision Bootcamp: Assignment 1

## Reading

Take a photo of any object in your room using your mobile or laptop's camera

Upload the image into Colab. Then read the image
"""

# Import the needed libraries
import cv2
import matplotlib.pyplot as plt
import numpy as np

# read the image
I = cv2.imread('pic2.jpg')

"""Resize the image to 512*512 pixels using the resize function in OpenCV"""

resized_image = cv2.resize(I, (512,512))

"""## Converting"""

# Convert the reseized image to RGB
rgb_image = cv2.cvtColor(resized_image,cv2.COLOR_BGR2RGB)

# show the rgb image
plt.imshow(rgb_image)
plt.show

# Convert the reseized image to grayscale
gray_image = cv2.cvtColor(resized_image, cv2.COLOR_BGR2GRAY)

# show the reseized gray image
plt.imshow(gray_image, cmap = 'gray')
plt.show

# Split the reseized image into its three color channels
R, G, B = cv2.split(resized_image)
# show the channels in one plot
plt.figure(figsize=(15,5))

plt.subplot(1,3,1)
plt.imshow(R,cmap='Reds_r')
plt.subplot(1,3,2)
plt.imshow(G,cmap='Greens_r')
plt.subplot(1,3,3)
plt.imshow(B,cmap='Blues_r')

plt.show

"""## Convolutions

### Smoothing
"""

# convole the image with Box mask of size 3, 9, 17, 25 and plot the four results in one plot
s = 3
mask = np.ones((s,s)) / s**2
output1 = cv2.filter2D(gray_image, -1 , mask)

s = 9
mask = np.ones((s,s)) / s**2
output2 = cv2.filter2D(gray_image, -1 , mask)

s = 17
mask = np.ones((s,s)) / s**2
output3 = cv2.filter2D(gray_image, -1 , mask)

s = 25
mask = np.ones((s,s)) / s**2
output4 = cv2.filter2D(gray_image, -1 , mask)
plt.figure(figsize=(15,5))
plt.subplot(1,4,1)
plt.imshow(output1, cmap = 'gray')
plt.subplot(1,4,2)
plt.imshow(output2, cmap = 'gray')
plt.subplot(1,4,3)
plt.imshow(output3, cmap = 'gray')
plt.subplot(1,4,4)
plt.imshow(output4, cmap = 'gray')
plt.show

# convole the image with Gaussian mask of Scale 3, 9, 17, 25 (choose suitable mask size) and plot the four results in one plot
si = 19
sc = 3
gaussian1 = cv2.GaussianBlur(gray_image, (si,si),sc)

si = 55
sc = 9
gaussian2 = cv2.GaussianBlur(gray_image, (si,si),sc)

si = 103
sc = 17
gaussian3 = cv2.GaussianBlur(gray_image, (si,si),sc)

si = 151
sc = 25
gaussian4 = cv2.GaussianBlur(gray_image, (si,si),sc)


plt.figure(figsize=(15,5))
plt.subplot(1,4,1)
plt.imshow(gaussian1, cmap = 'gray')
plt.subplot(1,4,2)
plt.imshow(gaussian2, cmap = 'gray')
plt.subplot(1,4,3)
plt.imshow(gaussian3, cmap = 'gray')
plt.subplot(1,4,4)
plt.imshow(gaussian4, cmap = 'gray')
plt.show

"""### Difference"""

# convolve the image with h mask to catch v edges
m_v = np.array([[-1, 0, 1],
                 [-2, 0, 2],
                 [-1, 0, 1]])
edge_v = cv2.filter2D(gray_image, -1 , m_v)

# convolve the image with v mask to catch h edges
m_h = np.array([[-1,-2,-1],
                [ 0, 0, 0],
                [ 1, 2, 1]])
edge_h = cv2.filter2D(gray_image, -1 , m_h)

# convolve the image with l mask to catch all edges
m_l = np.array([[-1,-1,-1],
                [-1, 8,-1],
                [-1,-1,-1]])
edge_l = cv2.filter2D(gray_image, -1 , m_l)


plt.figure(figsize=(15,5))
plt.subplot(1,4,1)
plt.imshow(gray_image, cmap = 'gray')
plt.subplot(1,4,2)
plt.imshow(edge_v, cmap = 'gray')
plt.subplot(1,4,3)
plt.imshow(edge_h, cmap = 'gray')
plt.subplot(1,4,4)
plt.imshow(edge_l, cmap = 'gray')
plt.show